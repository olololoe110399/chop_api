import os

import streamlit as st

# from init import check_an_create_folder, handle_json_file
from init import check_an_create_folder
from init.embedding_utils import embed_documents_in_json_file

# from langchain.document_loaders import TextLoader
# from langchain.embeddings.openai import OpenAIEmbeddings
# from langchain.text_splitter import RecursiveCharacterTextSplitter
# from langchain.vectorstores import FAISS


st.header("C√†i ƒë·∫∑t cho kh√°ch h√†ng")

with st.sidebar.expander("C√†i ƒë·∫∑t", expanded=True):
    name = st.text_input("T√™n chatbot:", key="name_chatbot", value="ChopAI", max_chars=20)
    type_prod = st.text_input("Lo·∫°i s·∫£n ph·∫©m:", key="type_product", value="Th·ªùi trang", max_chars=20)
    language = st.selectbox(
        'Ng√¥n ng·ªØ:',
        ('Ti·∫øng Vi·ªát', 'Ti·∫øng Anh'),
        key="langage_product",
        index=0
    )
    ref = st.text_area(
        "Th√¥ng tin ƒë√≠nh k√®m: ",
        height=40, key="info_product",
        value="t√™n s·∫£n ph·∫©m, gi√°, h√¨nh ·∫£nh, ƒë·∫∑c bi·ªát ph·∫£i c√≥ link s·∫£n ph·∫©m"
    )

if not name or not type_prod or not language or not ref:
    st.info("Vui l√≤ng kh√¥ng b·ªè tr·ªëng th√¥ng tin", icon="üö®")
    st.stop()

uploaded_file = st.file_uploader(
    "Vui l√≤ng t·∫£i l√™n danh s√°ch s·∫£n ph·∫©m c·ªßa b·∫°n",
    accept_multiple_files=False,
    type=["json"],
    key="file_uploader",
)
uploaded_business = st.file_uploader(
    "Vui l√≤ng t·∫£i l√™n business cho s·∫£n ph·∫©m c·ªßa b·∫°n",
    accept_multiple_files=False,
    type=["txt"],
    key="file_uploader_bussines"
)

if not uploaded_file or not uploaded_business:
    st.info("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ ti·∫øp t·ª•c.", icon="üö®")
    st.stop()

with st.spinner('ƒêang t·∫£i d·ªØ li·ªáu...'):
    check_an_create_folder(os.path.join(os.getcwd(), "resources"))
    file_path = os.path.join(
        os.getcwd(), "resources", uploaded_file.name
    )
    file_path_business = os.path.join(
        os.getcwd(), "resources", 'business_processed.txt'
    )

    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
        # handle_json_file(file_path, f'{os.path.join(os.getcwd(), "resources")}/data_processed.txt')

    with open(file_path_business, "wb") as f:
        f.write(uploaded_business.getbuffer())

system_message = """
B·∫°n l√† m·ªôt ng∆∞·ªùi gi·ªõi thi·ªáu {0} h·ªØu √≠ch s·∫Ω c√≥ cu·ªôc tr√≤ chuy·ªán nh·∫π nh√†ng v√† th√¢n thi·ªán v·ªõi ng∆∞·ªùi d√πng ƒë·ªÉ t√¨m hi·ªÉu v·ªÅ
lo·∫°i {0} m√† h·ªç ƒëang t√¨m ki·∫øm. Lu√¥n t·ª± gi·ªõi thi·ªáu m√¨nh l√† "{1} ng∆∞·ªùi gi·ªõi thi·ªáu {0}", nh∆∞ng thay v√¨ h·ªèi tr·ª±c
ti·∫øp v·ªÅ lo·∫°i {0} h·ªç mu·ªën, h√£y c√≥ cu·ªôc tr√≤ chuy·ªán nh·∫π nh√†ng ƒë·ªÉ hi·ªÉu ƒë∆∞·ª£c {0} m√† ng∆∞·ªùi d√πng t√¨m ki·∫øm. C·ªë g·∫Øng hi·ªÉu ng∆∞·ªùi d√πng
b·∫±ng c√°ch n√≥i chuy·ªán v·ªõi h·ªç v·ªÅ nh·ªØng ƒëi·ªÅu h·ªç c·∫ßn. ƒê·ª´ng b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán v·ªÅ {0} nh∆∞ m·ªôt ng∆∞·ªùi b√°n
h√†ng. Khi b·∫°n c√≥ ƒë·ªß th√¥ng tin, h√£y ƒë·ªÅ xu·∫•t m·ªôt lo·∫°i {0} cho ng∆∞·ªùi d√πng. B·∫°n c≈©ng tr·∫£ v·ªÅ c√°c JSON
schema nh∆∞ sau, m√°y ch·ªß c√≥ th·ªÉ tr·ªôn l·∫´n c·∫•u tr√∫c c·ªßa hai ƒë·ªëi t∆∞·ª£ng JSON, nh∆∞ng lu√¥n tr·∫£ v·ªÅ t·∫•t c·∫£ c√°c tr∆∞·ªùng c·ªßa
ƒë·ªëi t∆∞·ª£ng JSON t∆∞∆°ng ·ª©ng:

Lu√¥n lu√¥n tr·∫£ v·ªÅ Schema sau cho vi·ªác truy xu·∫•t:

{{
    "your own reasoning": "string", # Gi·∫£i th√≠ch l√Ω do ƒë·∫±ng sau ƒë·ªÅ xu·∫•t c·ªßa b·∫°n.
    "confidence": "string",# M·ª©c ƒë·ªô tin c·∫≠y c·ªßa b·∫°n trong ƒë·ªÅ xu·∫•t, c√≥ th·ªÉ l√† "low", "medium", ho·∫∑c "high".
    "search term for retrieval": "list", # Danh s√°ch c√°c thu·∫≠t ng·ªØ t√¨m ki·∫øm chung d·ª±a tr√™n s·ªü th√≠ch c·ªßa ng∆∞·ªùi d√πng. Ch·ªâ
    tr·∫£ v·ªÅ n·∫øu ƒë·ªô tin c·∫≠y l√† trung b√¨nh ho·∫∑c cao. C√°c thu·∫≠t ng·ªØ n√†y ch·ªâ n√™n l√† t√™n c·ªßa {0} v√† kh√¥ng ch·ª©a b·∫•t k·ª≥
    th√¥ng tin n√†o kh√°c. N·∫øu c√≥ nhi·ªÅu s·ªü th√≠ch trong ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng, tr·∫£ v·ªÅ danh s√°ch c√°c thu·∫≠t ng·ªØ t√¨m ki·∫øm
    kh√°c nhau cho m·ªói s·ªü th√≠ch. Lu√¥n bao g·ªìm t·∫•t c·∫£ c√°c kh√≠a c·∫°nh c·ªßa s·ªü th√≠ch c·ªßa ng∆∞·ªùi d√πng nh∆∞ m·ªôt thu·∫≠t ng·ªØ t√¨m
    ki·∫øm ri√™ng bi·ªát. Ch·ªâ bao g·ªìm c√†ng nhi·ªÅu thu·∫≠t ng·ªØ c·∫ßn thi·∫øt.
    "your response to user": "string" # Ph·∫£n h·ªìi c·ªßa b·∫°n ƒë·∫øn ng∆∞·ªùi d√πng, ƒë√¢y l√† ƒëi·ªÅu ng∆∞·ªùi d√πng s·∫Ω th·∫•y. Lu√¥n ƒë√≠nh 
    k√®m c√°c th√¥ng tin quan tr·ªçng nh∆∞ {3} v.v. N·∫øu c√≥ nhi·ªÅu s·∫£n ph·∫©m ph√π h·ª£p, h√£y ƒë·ªÅ xu·∫•t nhi·ªÅu s·∫£n ph·∫©m. N·∫øu b·∫°n kh√¥ng 
    c√≥ s·∫£n ph·∫©m ph√π h·ª£p, h√£y ƒë·ªÅ xu·∫•t m·ªôt lo·∫°i {0} cho ng∆∞·ªùi d√πng (nhi·ªÅu nh·∫•t l√† 3 s·∫£n ph·∫©m).
}}
L∆ØU √ù:
Ch·ªâ tr·∫£ v·ªÅ t√™n "search term for retrieval" ph√π h·ª£p v·ªõi s·ªü th√≠ch c·ªßa ng∆∞·ªùi d√πng trong lƒ©nh v·ª±c {0} khi b·∫°n c√≥ ƒë·ªß t·ª± tin.

ƒê·ª´ng tr·∫£ l·∫°i m·ªôt h·ªón h·ª£p c·ªßa c√°c ƒë·ªëi t∆∞·ª£ng JSON. Ch·ªâ tr·∫£ l·∫°i m·ªôt ho·∫∑c m·ªôt lo·∫°i kh√°c.

N·∫øu "confidence" l√† "low" th√¨ ph·∫£i tr·∫£ v·ªÅ "search term for retrieval" l√† danh s√°ch r·ªóng.

Lu√¥n n√≥i chuy·ªán b·∫±ng ng√¥n ng·ªØ {2}.

Lu√¥n tr·∫£ v·ªÅ "your response to use" d∆∞·ªõi d·∫°ng markdown.
""".format(type_prod, name, language, ref)

# st.markdown(system_message)
if st.button("T·∫°o chatbot"):
    with st.spinner('ƒêang t·∫£i th√¥ng tin v√† t·∫°o chatbot...'):
        with open(os.path.join(os.getcwd(), 'resources/system_message'), 'w') as file:
            file.write(system_message)

        output_file_path = os.path.join(os.getcwd(), "resources/processed_data_with_embeddings.json")
        embed_documents_in_json_file(file_path, output_file_path)

        # loader = TextLoader(
        #     file_path=os.path.join(os.getcwd(), "resources/data_processed.txt"),
        #     encoding="utf-8",
        # )
        # data = loader.load_and_split(
        #     text_splitter=RecursiveCharacterTextSplitter(
        #         chunk_size=4000,
        #         chunk_overlap=4,
        #     ), )
        #
        # db = FAISS.from_documents(
        #     data,
        #     OpenAIEmbeddings(),
        # )
        # db.save_local(os.path.join(os.getcwd(), 'resources/vectordb'))
        st.success("T·∫°o chatbot th√†nh c√¥ng")
